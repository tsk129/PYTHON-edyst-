Given three sorted arrays A, B and C of not necessarily same sizes.

Calculate the minimum absolute difference between the maximum and minimum number from the triplet a, b, c such that a, b, c belongs arrays A, B, C respectively.
i.e. minimize | max(a,b,c) - min(a,b,c) |

Example :

Input:

A : [ 1, 4, 5, 8, 10 ]
B : [ 6, 9, 15 ]
C : [ 2, 3, 6, 6 ]
Output:

1
Explanation: We get the minimum difference for a=5, b=6, c=6 as | max(a,b,c) - min(a,b,c) | = |6-5| = 1.


*********CODE*********

class Solution:
    def abdif(self, a, b, c):
        return abs(max(a, b, c) - min(a, b, c))
   
    def solve(self, A, B, C):
        # write your method here
        i, j, k = len(A)-1, len(B)-1, len(C)-1
        mindif = self.abdif(A[i],B[j],C[k])
        while i!=-1 and j!=-1 and k!=-1:
            curdif = self.abdif(A[i],B[j],C[k])
            if curdif < mindif:
                mindif = curdif
            if A[i] == max(A[i],B[j],C[k]):
                i -= 1
            elif B[j] == max(A[i],B[j],C[k]):
                j -= 1
            else:
                k -= 1
        return mindif
        
L = list(map(int,input().split()))
M = list(map(int,input().split()))
N = list(map(int,input().split()))
s = Solution()
print(s.solve(L,M,N))
