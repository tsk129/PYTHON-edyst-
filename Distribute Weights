You are given an integer array A of size N and an integer M. You have to distribute the elements of array A into M groups such that the maximum sum of elements in each group is minimum and the elements of array A allotted to any group is contiguous.

Write a program to determine the maximum sum of elements among all the groups.

Input format

First line: T (number of test cases)
For each test case
First line: Two space-separated integers N and M
Second line: N space-separated integers (denoting the elements of the array)
Output format
For each test case, print the maximum sum of elements among all the groups in a new line.

Constraints

1≤T≤100
1≤M≤N≤10^4
1≤Ai≤10^5
Sample Input

1
5 3
1 2 3 4 5
Sample Output

6
Explanation

Best possible way to distribute the given 5 elements into 3 bags is to :-
Group 1:- {1,2,3}
Group 2:- {4}
Group 3:- {5}
Hence answer will 1+2+3=6.


*********CODE*********

def correct(cen, arr, si, gr):
    count = 0
    add = 0
    sam = []
    for z in range(si):
        if arr[z] > cen:
            return False
        add += arr[z]
        if add > cen:
            count += 1
            sam.append(add - arr[z])
            add = arr[z]
    sam.append(arr[z])
    #print(sam)
    count += 1
    if count <= gr:
        return True
    return False


t = int(input())
for i in range(t):
    n = list(map(int, input().split()))
    N, M = n[0], n[1]
    m = list(map(int, input().split()))[:N]
    mas = sum(m)
    mis = 1
    res = 0
    while mis <= mas:
        mid = (mis + mas) // 2
        if correct(mid, m, N, M):
            res = mid
            mas = mid - 1
        else:
          #  print(mis,"else")
            mis = mid + 1
    print(res)
